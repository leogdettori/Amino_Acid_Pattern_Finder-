#Function is defined
def Coded_List_Generator(path_now, cluster_name, clusters, cluster_code, window = "none", step = "none",output_path = "input"):
    import sys, os
    
    #Starting message:
    print("Coded_List_Generator has started:\n\n")
    
    #In case output was not defined
    if output_path == "input":
        output_path = path_now
        print("No output defined! Output was set to same destination as input!" + "\n")
        

    #Starts very handy counter
    n1 = 0  #Helps to define the amount of groups we will be working with
    n2 = 0  #Keeps track of the group that we are currently working on
    independently = 0  #keeps track of whether we are coming from Extract_IDRs or working independently
    counter = 0  #keeps track of how many fasta files are present within current group (either .fasta or .txt)
    folder_created = 0  #keeps track of whether a folder was already created within the output destination to store the coded lists

    #Creates temporary variables to manage paths
    files = next(os.walk(path_now))[2]  #Helps to check if we are in the main folder generated by Extract_IDRs by compiling a list of all files within this folder
    folders = next(os.walk(path_now))[1]   #Helps to make a list of all the groups and theirs paths that we will be going through by compiling a list of all folder within this folder
    fastas = {}  #Lists all the fasta files for each group (either .fasta or .txt)

    #Checks if we are in the main folder generated by Extract_IDRs
    if 'Summary.txt' in files:
        print("Extract_IDRs has been used!"+'\n\n')
        for f in folders:
            #When not using Slice_Sequences
            if window == "none" and step == "none":
                #Updates folders with the path to the subfolder 'IDRs' where Extract_IDRs stored the fasta sequences of the IDRs
                folders[n1] = path_now + folders[n1] +'/IDRs/'
            #When using Slice_Sequences
            else:
                #Updates folders with the path to the subfolder 'Slices' where Extract_IDRs stored the fasta sequences of the Sliced IDRs
                folders[n1] = path_now + folders[n1] +'/Slices_of_' + str(window) + '_StepSize_' + str(step) + '/'                
            
            #Compiles the fasta sequences of the IDRs for each group within a variable (either .fasta or .txt)
            fastas[n1] = [f for f in os.listdir(folders[n1]) if f.endswith(".txt") | f.endswith(".fasta")]
            n1 = n1 + 1            
            
        #In case we are in the main folder generated by Extract_IDRs, updates output_path to a more external folder so results are stored in an orderly manner
        #Switches directory to output location
        os.chdir(output_path)        
        #Switches directory to folder above
        path_parent = os.path.dirname(os.getcwd())
        os.chdir(path_parent)
        #Updates output path information
        output_path = str(path_parent).replace('\\', "/")+"/" 
            

    #Checks if we are in a folder containing fasta sequences (either .fasta or .txt), thus we opted not to use Extract_IDRs first
    elif files != []:
        print("Extract_IDRs has not been used!"+'\n\n')
        independently = 1 # we are working independently from Extract_IDRs
        #Compiles the fasta sequences inside the this folder within a variable (either .fasta or .txt)
        fastas[n1] = [f for f in os.listdir(path_now) if f.endswith(".txt") | f.endswith(".fasta")]       
        
        #switches folders to path_now so the program can run independently from Extract_IDRs
        #print(folders)
        if path_now.endswith("/"):
            folders = path_now
        else:
            folders = path_now + "/"
            
        #Checks for error: no fasta files inside specified location (neither .fasta nor .txt)
        if fastas[n1] == []:
            sys.exit("No fasta files were found (neither .fasta nor .txt)! \nPlease, try a different folder! =)") 
        
        #If there is no error, proceeds with code    
        n1 = n1 + 1
        
    
    #Exits program because no fasta files were found (either .txt or .fasta)
    else:
        sys.exit("No fasta files were found (neither .fasta nor .txt)! \nPlease, try a different folder!") 

        
    #Neat Message
    print("# --------------------------------------------- #\n")

    #Preapares to loop through the gropus and compiles the list files that will be used by Amino_Acid_Pattern_Finder
    while n2 < n1:

        #Changes current directory to the folder containing the fasta sequences (either .fasta or .txt)
        #os.chdir(folders[n2]) - from older version
        #The List name comes from the folder name where the IDRs are stored
        #current_list_name = folders[n2].split('/') - from older version
        
        #If we are coming from Extract_IDRs
        if independently == 0:
            #Changes current directory to the folder containing the fasta sequences (either .fasta or .txt)
            os.chdir(folders[n2])
            #When not using Slice_Sequences
            if window == "none" and step == "none":
                #The List name comes from the folder name where the IDRs are stored
                current_list_name = folders[n2].split('/')            
                current_list_name = current_list_name[len(current_list_name)-3] +'__'+cluster_name
            #When using Slice_Sequences
            else:
                #The List name comes from the folder name where the IDRs are stored
                current_list_name = folders[n2].split('/')
                #Window size and Step size information are added to the List name
                current_list_name = current_list_name[len(current_list_name)-3] +'_window_'+str(window)+'_step_'+str(step)+'__'+cluster_name
                        
        #If we are working independently
        elif independently == 1:
            #Changes current directory to the folder containing the fasta sequences (either .fasta or .txt)
            #print(folders)
            os.chdir(folders)
            #The List name comes from the folder name where the IDRs are stored
            current_list_name = folders.split('/')            
            current_list_name = current_list_name[len(current_list_name)-2] +'__'+cluster_name
            
            
        #Gets current directory  information for the list file
        cwd = os.getcwd()

        #Prepares to creates list file within the established output folder
        if output_path.endswith('/'):
            pass
        else:
            output_path = output_path + "/"
        #Prepares to create a folder within the output destination to store all the list files generated
        if folder_created == 0:
            #Updates output path to aid with folder creation
            output_path = output_path+"Coded_Lists"+"__"+cluster_name
            #Creates the folder
            os.mkdir(output_path)
            #updates output path to move on with code
            output_path = output_path+"/"
            #Marks that folder was created
            folder_created = folder_created + 1
                
        #Creates list file within the established output folder
        file = open(output_path+current_list_name+'.txt',"w") 
        counter = 0  #Resets counter

        #Starts to loop trhough each fasta file within the group to add them to the list file   
        #print(fastas)
        for f in fastas[n2]:
            counter = counter + 1
            name = f.split(".")[0]
            location = cwd + "\\" + f
            l = [name, location, str(cluster_code), str(clusters)]
            for word in l:
                file.write(word + '\t')
            #for cluster in clusters:
                #file1.write(str(cluster) + ", ")
            #    file1.write(', '.join(str(cluster)))
            file.write('\n')
            #file1.write(name + "\t" + location + "\t" + str(cluster_code) + "\t" + str(clusters) + "\n")

        print(str(counter) + " sequences were successfully compiled into " + current_list_name + ".txt" +'\n')    
        file.close()

        #Prepares counter for next iteration
        n2 = n2 + 1
    
    #Ending message
    print("# --------------------------------------------- #")
    print("\nCoded_List_Generator is done!\n")
    print("# ------------------------------------------------------------------------------------------------------------------------ #")
    print("\n")
    
    #This is what this function returns to be subsequently used in the IDR Sequence Composition Module/Function  
    return output_path
